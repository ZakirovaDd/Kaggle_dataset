from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split

df_train2=df_train.dropna(axis=0)
y=df_train2.FloodProbability

selected_attributes_2 = df_train2.select_dtypes(include=['int64', 'float64']).columns.drop('id')
selected_attributes_2=selected_attributes_2.drop('FloodProbability')
selected_attributes_2

x= df_train2[selected_attributes_2]
x.describe()

my_model_flood = DecisionTreeRegressor(random_state=1)
my_model_flood.fit(x,y)
""" DecisionTreeRegressor
DecisionTreeRegressor(random_state=1)"""

predicted_flood = my_model_flood.predict(x)
mean_absolute_error(y, predicted_flood)

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state = 0)
my_model_flood = DecisionTreeRegressor()
my_model_flood.fit(train_x, train_y)

train_x, val_x, train_y, val_y = train_test_split(x, y, random_state = 0)
train_y
val_predictions = my_model_flood.predict(val_x)
print(mean_absolute_error(val_y, val_predictions))
#0.039356989516619555

def get_mae(max_leaf_nodes, train_x, val_x, train_y, val_y):
    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(train_x, train_y)
    preds_val = model.predict(val_x)
    mae = mean_absolute_error(val_y, preds_val)
    return(mae)
for max_leaf_nodes in [2,5,10,30, 50, 500, 5000,10000]:
    my_mae = get_mae(max_leaf_nodes, train_x, val_x, train_y, val_y)
    print("Max leaf nodes:", max_leaf_nodes, "Mean Absolute Error:", my_mae)
"""Max leaf nodes: 2 Mean Absolute Error: 0.04037846604357559
Max leaf nodes: 5 Mean Absolute Error: 0.039733788026936764
Max leaf nodes: 10 Mean Absolute Error: 0.039238904409032764
Max leaf nodes: 30 Mean Absolute Error: 0.03839510911480716
Max leaf nodes: 50 Mean Absolute Error: 0.03800337261545174
Max leaf nodes: 500 Mean Absolute Error: 0.03619131746393034
Max leaf nodes: 5000 Mean Absolute Error: 0.03453004081692954
Max leaf nodes: 10000 Mean Absolute Error: 0.0342916774439719
"""
